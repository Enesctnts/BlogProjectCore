EntityFrameworkCore 5.0.9
EntityFrameworkCore.Design 5.0.9
EntityFrameworkCore.SqlServer 5.0.9
EntityFrameworkCore.Tools 5.0.9






Projeye Conrete klasörü oluþturarar baþladýk. Bu klasörde Modellerimizi tanýmladýkç
Modellerimiz Blog, Category(Kategori), About(Hakkýnda), Writer(Yazar), Comment(Yorumlar), Contact(iletiþim)
sonra DataAccessLayer katmanýna EntityFrameworkCore 5.0.9, EntityFrameworkCore.Design 5.0.9, EntityFrameworkCore.SqlServer 5.0.9, 

Modellerde oluþturulan sýnýflarýn yani tablolarýn. Tablolar arasý iliþkisi yapýldý.
Migration yapýlarak veritabanýnda tablolar ve iliþkiler oluþturuldu.

DataAccessLayer katmanýnda Concrete klasörü oluþturuldu. Bu klasörde Context classý oluþturduk. Bu classýn görevi ConnectionString yani veritabanýn yolu yazýldý.
Sonra DbSet ile Entitylerin veritabanýnda hangi tablolara eþleþiceði belirlendi. Veritabanýnda tablolar sonuna s takýsý alarak oluþturulur.

Generic repository yazýldý. GenericRepository Desing Patterndir. Bize saðladýgý en büyük avantaj kod tekrarýný engelliyor (Don't Repeat Yourself), 
Hata çýktýðý zaman daha kolay bir þekilde bulmamýzý saðlýyor ve belleði daha az yormaktadýr.

Projede kullanýlacak Crud iþlemleri için interfaceler ve somut sýnýflarý (classlar) yazýldý. Bu yazýlan somut sýnýflar Generic repository den implement edildi.

Katmanlý mimari kullanma amacýmýz --> Kod tekrarýný azaltmak, projede hatalar çýktýðý zaman hatanýn hangi katmanda oldugunu anlayýp dahaaz veri tarayarak hatalarý bulmak.
Sisteme yeni özellikler eklendi zaman daha kolay bir þekilde sisteme dahil etmek. 
Katmanlarýn saðladýgý en büyük avanjalardan bir tanesi Business katmanýný deðiþtirmek istediðimiz zaman baþka bir projenin business katmanýný dll leri sayesinde 
projeye dahil edip hata çýkmadan çalýþmasýný saðlamak(Tabiki solid prensiblerine uyarak). Katmanlar arasý geçiþte interfaceler kullanýlýr.
Ve ve ve en önemlisi her katmanýn kendi görevi olmasý Entity katmaný modellerin oldugu katman oluþturulmasý özelliklerinin eklenmesi

DataAccess katmaný veritabaný iþlemlerinin yapýlmasý Context iþlemleri, Migration iþlemleri ve veri tabanýndan verilerin ekleme,silmei güncelleme iþlemleri(CRUD)
Business katmanýn görevi iþ kurallarýnýn oldugu yerdir. Validationlarýn yapýldýgý(Ürün ismini boþ geçemezsiniz, Ürünün fiyatý 1000tl den yukarda olmalýdýr vs.)
Business katmanýnda loglama,casheleme, validation, transuction iþlemleri business katmanýnda yapýlýr(Genellikle).
UI katmaný Bizim ekranda görüntü olarak iþlemler yaptýgýmýz. Projedekullanýlan modellerin (Category) listelenmesi, Eklenmesi vs. Arayüz kýsmýdýr.
Projeyi dýþ dünyaya açar. Frontend iþlemleri burda yapýlýr(Html,css,js,bootstrap,ajax,jquery).Bu projenin kapaðý burasýdýr. Görünen yüzüdür :D

Proje ile ilgili temalar css,htmll,js,bootstrapt ler wwwroot içinde tutulur.
Proje açýlýrken HomeController kendisi geliyor.

Tema projeye eklendikten sonra bize sabit bir sayfa yani layout lazým. UserLayout ekledik.Kullancagýmýz temayý buraya yapýþtýrdýk.

ilk olarak main kýsmýna yani projemizin viewleri nerde çalýþsýn onu söylüyoruz. Main kýsmýnda çalýþsýn diyoruz.

 <!--/main-->
    @RenderBody()
    <!--//main-->


sonra 
Projede her sayfada olan header kýsmý ekliyeceðimiz diger sayfalarda olmasýný istediðimiz için ve daha kolay iþlem yapabilmek için. yani kontrolü kolay olsun diye
Header kýsmýný Shared klasörüne sað týk yapýp partial1 isimli partial oluþturup bunun içine kopyalýyoruz.
@await Html.PartialAsync("Partial1") UserLayoutta kesilen kodlarý partial1 viewine aktarýyoruz.sonra yandaki kod ile kodlarýn kesildiði yer bu kodu yapýþtýrýyoruz.


ayný iþlemi <!--footer--> kýsmý içindde yapýyoruz onuda bu þekilde çagýrýyoruz.  @await Html.PartialAsync("Partial3") 



CategoryController eklendi. CategoryControllerdaki Index actionu tüm kategorileri getirme iþlemi yaptýk.

BlogController oluþturuldu. BlogController Index actionunda GetBlogListWithCategory metoduyla kategoriye göre bloglarý listeledik.
Index viewýnda kullanýlan temanýn section kýsmýný aldýk ve Düzenlemeler yaptýk. 
Burada bloðun oluþturulma tarihini bu þekilde alýyoruz @(((DateTime)@item.BlogCreateDate).ToString("dd-MMM-yyyy")).

Blogun contentini @item.BlogContent.Substring(0, item.BlogContent.Substring(0, 130).LastIndexOf(" ")) bu þekilde çagýrýyoruz.

<!-- item.BlogContent.Substring(0, item.BlogContent.Substring(0,130).LastIndexOf(" "))  
burda Substring yapmamýzýn sebebi yazýlan yazýlarýn belirli harften fazlasýný alma örnek olarak minimum 0 maksimum 100 harf olucak.
100 harfe kadarýný alcak geri kalan iþlemide devamýný oku butonu yapýcaz ordan görebilecekler. Eger yazýlarda 100 harften az yazý var ise hata verir.  
item.BlogContent.Substring(0,130).LastIndexOf(" ") bu kýsým ise içeriðimizin 130 harfine kadar al 
ama 130 harf bir kelimenin ortasýna geliyosa o kelimeden sonraki boþluga kadar al diyoruz. Yani 130 kelimeden sonraki boþluga kadar al diyoruz.  -->

sonra devamýný oku iþlemi yaptýk. /Blog/BlogReadAll/@item.BlogID/ bu þekilde.

<!-- BlogId göndermemizin sebebi Devamýný okuya bastýgýnda hangi yazýdaki devamýný oku butonunu bastýgýný id ile o sayfaya göndericez. 
O sayfada yazýnýn devamýný görebileceðiz-->

Sonra BlogReadAll actionu oluþturduk. GetBlogById metodu çagýrdýk.

GetBlogById view kýsmýný oluþturduk. Temadaki single.html içindeki kodlarý buraya yapýþtýrdýk.
<div class="col-lg-8 left-blog-info-w3layouts-agileits text-left"> divinin altýnda foreach ile döndük.

sonra <!--Yorumlarý listeleme iþlemleri--> yapan kýsmý yani 
<div class="comment-top">
    <h4>Yorumlar</h4>
ile baþlayýn kýsmý kestik ve CommentController içinde CommentListByBlog adýnda partialView oluþturduk.
CommentListByBlog view kýsmýna bu kestiðimiz kýsmý yapýþtýrdýk. Bunu yapmamýzýn sebebi yorumlarý listeleme iþlmelerini partialview tanýmlayarak.
Daha kolay kontrol etmek için ve bu yorumlar her tarafta lazým olacagý için direk bu partiali her tarafta çagýrabiliriz.

sonra 
ayný iþlemi Yorumlarý eklee iþlemi yani PartialAddComment adýndan CommentControllerda partialView ekledik.
<!--Yorum ekleme iþlemleri-->
<div class="comment-top">
    <h4>Yorum Yapýn</h4>
    ile baþlaya yeri kestik ve bunu PartialAddComment.cshtml Viewde yapýþtýrdýk.Bunu yapmamýzýn sebebi yorum ekleme iþlmelerini partialview tanýmlayarak.
Daha kolay kontrol etmek için ve bu yorumlar her tarafta lazým olacagý için direk bu partiali her tarafta çagýrabiliriz.

ve hepsini yaptýktan sonra

BlogReadAll.cshtml View kýsmýnda neyi kestiysek onun partialini ekledik. Yani 

 <!-- CommentListByBlog iþlemini bu þekilde de çagýrabiliyoruz. Yorumlar partiali-->
 @await Html.PartialAsync("~/Views/Comment/CommentListByBlog.cshtml")

 CommentListByBlog içindeki kodlarý nerden kestiysek oraya bu kodu yazýyoruz.

  <!--Yorum ekleme partiali-->
                    @await Html.PartialAsync("~/Views/Comment/PartialAddComment.cshtml")

                    ayný iþi burda da yapýyorz.


CommentController da 

yorum ekleme PartialAddComment

//Bloglardaki yorum listesi CommentListByBlog actionlarý oluþturduk bunlarýn kodlarýnýn nerden geldiðini sonra 
gelen kodlarýn gelen yerine hangi komutu yazdýgýmýzý yukarda anlattým. 







